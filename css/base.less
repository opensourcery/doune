/**
 * OpenSourcery LESS mixin base library.
 *
 * The $ prefix prevents a mixin from being instantiated as a class or ID
 * selector on its own. In other words, $ cuts out CSS bloat.
 */

/* Shadows */
$box-shadow (@xoff: 0px; @yoff: 0px; @radius: 3px; @shadow: #000000) {
  -webkit-box-shadow: @xoff @yoff @radius @shadow;
  -moz-box-shadow: @xoff @yoff @radius @shadow;
  box-shadow: @xoff @yoff @radius @shadow;
}
$no-box-shadow {
  -webkit-box-shadow: 0 0 0;
  -moz-box-shadow: 0 0 0;
  box-shadow: 0 0 0;
}
$text-shadow (@xoff: 0px; @yoff: 0px; @radius: 3px; @shadow: #000000) {
  text-shadow: @xoff @yoff @radius @shadow;
  filter: dropshadow(color=@shadow, offx=@xoff, offy=@yoff);
}

/*
 * Rounded corners
 */
$rounded-corners (@top-left: 6px; @top-right: 6px; @bottom-right: 6px; @bottom-left: 6px) {
  -moz-border-radius: @top-left @top-right @bottom-right @bottom-left;
  -webkit-border-radius: @top-left @top-right @bottom-right @bottom-left;
  border-radius: @top-left @top-right @bottom-right @bottom-left;
}
$rounded-corners-top (@radius: 6px) {
  -moz-border-radius-topleft: @radius;
  -moz-border-radius-topright: @radius;
  -webkit-border-top-right-radius: @radius;
  -webkit-border-top-left-radius: @radius;
  border-top-left-radius: @radius;
  border-top-right-radius: @radius;
}
$rounded-corners-all (@radius: 6px) {
  $rounded-corners(@radius; @radius; @radius; @radius);
}
$no-rounded-corners {
  -moz-border-radius: 0;
  -webkit-border-radius: 0;
  border-radius: 0;
}

$chipped-corners { $rounded-corners(3px; 3px; 3px; 3px); }
$chipped-corners-left { $rounded-corners-left(3px; 0; 0; 3px); }
$chipped-corners-right { $rounded-corners-right(0; 3px; 3px; 0); }

/*
 * Gradients
 */
$vertical-gradient-primary {
  background: -webkit-gradient(linear, left bottom, left top, color-stop(0.33, @secondary), color-stop(0.66, @secondary-muted));
  background: -moz-linear-gradient(center bottom, @secondary 33%, @secondary-muted 66%);
}
$vertical-gradient-primary-reversed {
  background: -webkit-gradient(linear, left bottom, left top, color-stop(0.33, @secondary-muted), color-stop(0.66, @secondary));
  background: -moz-linear-gradient(center bottom, @secondary-muted 33%, @secondary 66%);
}
$vertical-gradient-secondary {
  background: -webkit-gradient(linear, left bottom, left top, color-stop(0.33, @primary-muted), color-stop(0.66, @primary));
  background: -moz-linear-gradient(center bottom, @primary-muted 33%, @primary 66%);
}
$vertical-gradient-secondary-reversed {
  background: -webkit-gradient(linear, left bottom, left top, color-stop(0.33, @primary), color-stop(0.66, @primary-muted));
  background: -moz-linear-gradient(center bottom, @primary 33%, @primary-muted 66%);
}

/*
 * Markup free clearing (See: http://www.positioniseverything.net/easyclearing.html )
 *
 * Note: Trying to use this as a regular mixin may nuke the other styles
 * inside of your selector.
 */
$clearfix {
  :after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}

/**
 * Hide elements from all users.
 *
 * Used for elements which should not be immediately displayed to any user. An
 * example would be a collapsible fieldset that will be expanded with a click
 * from a user. The effect of this class can be toggled with the jQuery show()
 * and hide() functions.
 */
$element-hidden {
  display: none;
}

/**
 * Hide elements visually, but keep them available for screen-readers.
 *
 * Used for information required for screen-reader users to understand and use
 * the site where visual display is undesirable. Information provided in this
 * manner should be kept concise, to avoid unnecessary burden on the user. Must
 * not be used for focusable elements (such as links and form elements) as this
 * causes issues for keyboard only or voice recognition users. "!important" is
 * used to prevent unintentional overrides.
 */
$element-invisible {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
}

/**
 * Apply $link-button to a link to make it look and act like a button/submit.
 */
@button-color: #ECE7E2;
@button-highlight-color: #F3F0ED;

$link-button (@top: 0px) {
  $rounded-corners-all (3px);
  $box-shadow (0px; 1px; 3px);

  background-color: @button-color;
  border: 1px solid #DEDEDE;
  border-top: 1px solid #EEE;
  border-left: 1px solid #EEE;
  color: #333;
  display: block;
  float: left;
  font-size: 12px;
  margin: 0.5em;
  outline: none;
  padding: 3px 14px;
  position: relative;
  top: @top;

  :link, :visited, :hover, :active {
    color: #333;
    text-decoration: none;
  }
  :hover, :focus { background-color: @button-highlight-color; }

  :active {
    top: @top + 1px;
    // for some reason it seems that using the box-shadow property here
    // (whether by way of a mixin or not) triggers some LESS bug that causes
    // each of the *box-shadow declarations to be the same as above. Grrr.
    -webkit-box-shadow: 0 0 2px #000;
    -moz-box-shadow: 0 0 2px #000;
  }
}

